<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IIR滤波器</title>
    <url>/2021/10/24/IIR%E6%BB%A4%E6%B3%A2%E5%99%A8/</url>
    <content><![CDATA[<p>还在整理总结中…</p>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css">]]></content>
      <categories>
        <category>FPGA</category>
        <category>Verilog</category>
        <category>信号与系统</category>
        <category>滤波器</category>
      </categories>
  </entry>
  <entry>
    <title>money</title>
    <url>/2021/10/23/money/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9caaf72ae8c813afbb86e9087eef5a564693af77f1999ccdf23aa7f7a64c70b3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>money</category>
      </categories>
      <tags>
        <tag>money</tag>
      </tags>
  </entry>
  <entry>
    <title>学习记录-1</title>
    <url>/2021/10/19/%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p><em><strong>状态机在FPGA设计中具有十分重要的地位，可以实现类似单片机一样的按一定流程“执行”，最后用一个例程来说明。。</strong></em></p>
<span id="more"></span>
<h1 id="状态机的定义"><a class="header-anchor" href="#状态机的定义">¶</a> 状态机的定义</h1>
<p>  <strong>状态机</strong>就是将一个复杂的问题分为很多个步骤，这一步做好了才能去到下一步。比如说实现一个i2c协议发送单字节数据过程，第一步是发送地址；第二步是等待应答，应答成功后进入第三部发送寄存器地址，失败则回到空闲态，然后再次等待发送信号；第四步也是等待应答，应带成功进入第五步发送一个字节数据，失败则返回空闲态，然后等待发送信号，从头开始；第六步等待应答，应答成功则发送stop信号，然后回到空闲态，等下一个发送信号，失败则回到空闲态等发送信号。当然，可以加入发送失败标志判断是否需要重新发送。</p>
<h1 id="moore和mealy状态机"><a class="header-anchor" href="#Moore和mealy状态机">¶</a> Moore和mealy状态机</h1>
<p>  结构图如下：</p>
<p><img src="/2021/10/19/%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81%E6%9C%BA.svg" alt="两种状态机"></p>
<table>
<thead>
<tr>
<th style="text-align:left">Moore状态机</th>
<th style="text-align:left">mealy状态机</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">  输出在时钟边沿变化（总是在一个周期后）。在Mealy机器中，输入更改可能会在逻辑完成后立即导致输出更改, 当两台机器互连时出现大问题 ，可能会发生异步反馈。</td>
<td style="text-align:left">  在相同的周期内反应 不需要等待时钟。在Moore机器中，可能需要更多逻辑来将状态解码为输出在时钟边沿之后更多的门延迟。并非所有时序电路都可以使用Mealy模型实现。一些时序电路只能作为摩尔机器实现。</td>
</tr>
</tbody>
</table>
<p>  一开始时对always@(*)中的赋值产生疑惑，经过网上查阅后总结组合逻辑用”=“，时序逻辑用“&lt;=”，比较有电路思维的搭配是=和always@ *(电平敏感)搭配，&lt;=和always@ (clk)。</p>
<p>  自己试验后发现，vivado综合出来的结果两种都是一样的，软件会自动优化，不同仿真器综合的结果可能会不同。本文在组合逻辑中全部选用“=”。</p>
<h1 id="状态机的描述方法verilog"><a class="header-anchor" href="#状态机的描述方法(Verilog)">¶</a> 状态机的描述方法(Verilog)</h1>
<table>
<thead>
<tr>
<th style="text-align:right">类型</th>
<th style="text-align:center">描述方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">一段式</td>
<td style="text-align:center">整个状态机写到一个always模块里面，在该模块中既描述状态转移，又描述状态的输入和输出；</td>
</tr>
<tr>
<td style="text-align:right">二段式</td>
<td style="text-align:center">用两个always模块来描述状态机，其中一个always模块采用同步时序描述状态转移；另一个模块采用组合逻辑判断状态转移条件，描述状态转移规律以及输出；</td>
</tr>
<tr>
<td style="text-align:right">三段式</td>
<td style="text-align:center">在两个always模块描述方法基础上，使用三个always模块，一个always模块采用同步时序描述状态转移，一个always采用组合逻辑判断状态转移条件，描述状态转移规律，另一个always模块描述状态输出(可以用组合电路输出，也可以时序电路输出)。</td>
</tr>
</tbody>
</table>
<center><font color="#dd00dd">二段式状态机的示例如下：</font><br></center> 
<figure class="highlight verilog"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个进程，同步时序always模块，格式化描述次态寄存器迁移到现态寄存器</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">        curr_state &lt;= INIT;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        curr_state &lt;= next_state; <span class="comment">// 注意，使用的是非阻塞赋值</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个进程，采用组合逻辑判断状态转移条件，描述状态转移规律以及输出</span></span><br><span class="line"><span class="keyword">always</span> @ (*) <span class="keyword">begin</span>	      <span class="comment">//电平触发,组合逻辑</span></span><br><span class="line">	<span class="keyword">case</span>(current_state)</span><br><span class="line">		S1: </span><br><span class="line">            <span class="keyword">if</span>(...)</span><br><span class="line">            	<span class="keyword">begin</span></span><br><span class="line">                    data_out = ...;</span><br><span class="line">                    next_state = S2; <span class="comment">//阻塞赋值</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    data_out = ...;</span><br><span class="line">                    next_state = S1; <span class="comment">//阻塞赋值</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">		...:</span><br><span class="line">	<span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<center><font color="#dd00dd">三段式状态机的示例如下：</font><br></center> 
<figure class="highlight verilog"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个进程，同步时序always模块，格式化描述次态寄存器迁移到现态寄存器</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">        curr_state &lt;= INIT;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        curr_state &lt;= next_state;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个进程，组合逻辑always模块，描述状态转移条件判断</span></span><br><span class="line"><span class="keyword">always</span> @ (*) <span class="keyword">begin</span>	      <span class="comment">//电平触发,组合逻辑</span></span><br><span class="line">	<span class="keyword">case</span>(current_state)</span><br><span class="line">		S1: </span><br><span class="line">            <span class="keyword">if</span>(...)</span><br><span class="line">            	<span class="keyword">begin</span></span><br><span class="line">                    ...;             <span class="comment">//一些条件的判断</span></span><br><span class="line">                    next_state = S2; <span class="comment">//阻塞赋值</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    ...;             <span class="comment">//一些条件的判断</span></span><br><span class="line">                    next_state = S1; <span class="comment">//阻塞赋值</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">		...:</span><br><span class="line">	<span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            ...;                  <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">        	<span class="keyword">case</span>(next_state)</span><br><span class="line">            	S1:</span><br><span class="line">                    out1 &lt;= <span class="number">1'b1</span>; <span class="comment">//注意是非阻塞逻辑</span></span><br><span class="line">                S2:</span><br><span class="line">                    out2 &lt;= <span class="number">1'b1</span>;</span><br><span class="line">                <span class="keyword">default</span>:...;</span><br><span class="line">            <span class="keyword">endcase</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<center><font color="#dd00dd">两段式有限状态机与三段式有限状态机的区别</font><br></center> 
<p>  <font color="#dd0000">FSM将时序部分（状态转移部分）和组合部分（判断状态转移条件和产生输出）分开，写为两个always语句，即为两段式有限状态机。将组合部分中的判断状态转移条件和产生输入再分开写，则为三段式有限状态机。<strong>二段式在组合逻辑特别复杂时适用，但要注意需在后面加一个触发器以消除组合逻辑对输出产生的毛刺。三段式没有这个问题，由于第三个always会生成触发器。</strong></font><br></p>
<h1 id="自动售货机示例"><a class="header-anchor" href="#自动售货机示例">¶</a> 自动售货机示例</h1>
<p>  两种货物的情况：为6元的货物，只接受1元和5元的货币，当接受的钱足够时，会吐出货物。当在60个时钟周期内没投够6元时，自动回到初始状态，重新选择货物。货物每出货一个，总数减1，为0时重新装货，如此循环。9元货物同理。</p>
<h2 id="状态转移图"><a class="header-anchor" href="#状态转移图">¶</a> 状态转移图</h2>
<p><img src="/2021/10/19/%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/%E7%8A%B6%E6%80%81%E6%9C%BA.drawio.svg" alt="状态转移图"></p>
<h2 id="代码实现"><a class="header-anchor" href="#代码实现">¶</a> 代码实现</h2>
<figure class="highlight verilog"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> shopping_1(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> rst_n,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] din,                           <span class="comment">// 投1元，5元</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] choose,                        <span class="comment">// 货物选择 1：6元，2：9元</span></span><br><span class="line">    <span class="keyword">input</span> confirm,                             <span class="comment">// 选择后确认货物</span></span><br><span class="line">    <span class="keyword">input</span> reconfirm,                           <span class="comment">// 确认后可以重新选择</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> dout,                           <span class="comment">// 出货</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>] change,                   <span class="comment">// 找钱</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> empty_6,                        <span class="comment">// 6元货物空信号</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> empty_9,                        <span class="comment">// 9元货物空信号</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>] count                     <span class="comment">// 当前总金额 ,输出到tb文件查看用</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">0</span>] curr_state, next_state;</span><br><span class="line"><span class="comment">// reg [4:0] count                 ;              // 当前总金额 </span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">6</span>:<span class="number">0</span>] goods_6               ;              <span class="comment">// 初始63</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">6</span>:<span class="number">0</span>] goods_9               ;              <span class="comment">// 初始63</span></span><br><span class="line"><span class="comment">// reg [6:0] goods_10              ;              // 初始63</span></span><br><span class="line"><span class="comment">// reg [6:0] goods_16              ;              // 初始63</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] time_cnt              ;              <span class="comment">// 计时60s</span></span><br><span class="line"><span class="keyword">reg</span> time_out                    ;              <span class="comment">// 时间计数完信号</span></span><br><span class="line"><span class="keyword">reg</span> time_begin                  ;              <span class="comment">// 时间开始计数信号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------货物全局初始化-------------------------</span></span><br><span class="line"><span class="keyword">parameter</span> INIT   = <span class="number">11</span>              ;              <span class="comment">// 货物不够就初始化装货</span></span><br><span class="line"><span class="keyword">parameter</span> IDLE   = <span class="number">22</span>              ;              <span class="comment">// 选择货物</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------6元货物状态：-------------------------</span></span><br><span class="line"><span class="keyword">parameter</span> S6_0   = <span class="number">1</span>              ;              <span class="comment">// 支付过程</span></span><br><span class="line"><span class="keyword">parameter</span> S6_1   = <span class="number">2</span>              ;              <span class="comment">// 满足金额出货</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------9元货物状态：-------------------------</span></span><br><span class="line"><span class="keyword">parameter</span> S9_0   = <span class="number">3</span>              ;              <span class="comment">// 支付过程</span></span><br><span class="line"><span class="keyword">parameter</span> S9_1   = <span class="number">4</span>              ;              <span class="comment">// 满足金额出货</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">        curr_state &lt;= INIT;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        curr_state &lt;= next_state;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @功能: 计时60s</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span>        </span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            time_cnt &lt;= <span class="number">8'd0</span>;</span><br><span class="line">            time_out &lt;= <span class="number">8'd0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(next_state == IDLE)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            time_cnt &lt;= <span class="number">8'd0</span>;</span><br><span class="line">            time_out &lt;= <span class="number">8'd0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (time_begin == <span class="number">1'd1</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span> (time_cnt &gt;= <span class="number">8'd60</span>)</span><br><span class="line">                        <span class="keyword">begin</span></span><br><span class="line">                            time_cnt &lt;= <span class="number">8'd0</span>;</span><br><span class="line">                            time_out &lt;= <span class="number">1'd1</span>;</span><br><span class="line">                        <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">else</span> </span><br><span class="line">                        <span class="keyword">begin</span></span><br><span class="line">                            time_cnt &lt;= time_cnt + <span class="number">8'd1</span>;</span><br><span class="line">                            time_out &lt;= <span class="number">1'd0</span>;</span><br><span class="line">                        <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    time_cnt &lt;= <span class="number">8'd0</span>;</span><br><span class="line">                    time_out &lt;= <span class="number">8'd0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @功能: 描述状态转移，和一些信号的产生。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span> (curr_state)</span><br><span class="line">        INIT:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                time_begin = <span class="number">1'b0</span>;</span><br><span class="line">                goods_6 = <span class="number">7'd10</span>;</span><br><span class="line">                goods_9 = <span class="number">7'd10</span>;</span><br><span class="line">                next_state = IDLE;</span><br><span class="line">                count = <span class="number">5'd0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        IDLE:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(empty_6 == <span class="number">1'b1</span> || empty_9 == <span class="number">1'b1</span>)</span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        time_begin = <span class="number">1'b0</span>;</span><br><span class="line">                        goods_6 = <span class="number">7'd10</span>;</span><br><span class="line">                        goods_9 = <span class="number">7'd10</span>;</span><br><span class="line">                        next_state = INIT;</span><br><span class="line">                        count = <span class="number">5'd0</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        <span class="keyword">if</span>(choose == <span class="number">3'd1</span>)</span><br><span class="line">                            <span class="keyword">begin</span></span><br><span class="line">                                time_begin = <span class="number">1'b1</span>;</span><br><span class="line">                                goods_6 = goods_6;</span><br><span class="line">                                next_state = S6_0;</span><br><span class="line">                                count = <span class="number">5'd0</span>;</span><br><span class="line">                            <span class="keyword">end</span> </span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(choose == <span class="number">3'd2</span>)</span><br><span class="line">                            <span class="keyword">begin</span></span><br><span class="line">                                time_begin = <span class="number">1'b1</span>;</span><br><span class="line">                                goods_9 = goods_9;</span><br><span class="line">                                next_state = S9_0;</span><br><span class="line">                                count = <span class="number">5'd0</span>;</span><br><span class="line">                            <span class="keyword">end</span></span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">begin</span></span><br><span class="line">                                time_begin = <span class="number">1'b0</span>;</span><br><span class="line">                                goods_6 = goods_6;</span><br><span class="line">                                goods_9 = goods_9;</span><br><span class="line">                                next_state = IDLE;</span><br><span class="line">                                count = <span class="number">5'd0</span>;</span><br><span class="line">                            <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        S6_0:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (reconfirm == <span class="number">1'b1</span>)   <span class="comment">// 是否重新选择</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        time_begin = <span class="number">0</span>;</span><br><span class="line">                        goods_6 = goods_6;</span><br><span class="line">                        count = <span class="number">5'd0</span>;</span><br><span class="line">                        next_state = IDLE;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        <span class="keyword">if</span> (time_out == <span class="number">1'b0</span>)</span><br><span class="line">                            <span class="keyword">begin</span></span><br><span class="line">                                <span class="keyword">if</span> (count &gt;= <span class="number">5'd6</span>)</span><br><span class="line">                                    <span class="keyword">begin</span></span><br><span class="line">                                        time_begin = <span class="number">1'b0</span>;</span><br><span class="line">                                        count = count;</span><br><span class="line">                                        goods_6 = goods_6 - <span class="number">7'd1</span>;</span><br><span class="line">                                        next_state = S6_1;</span><br><span class="line">                                    <span class="keyword">end</span></span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    <span class="keyword">begin</span></span><br><span class="line">                                        count = count + din;</span><br><span class="line">                                        time_begin = time_begin;</span><br><span class="line">                                        goods_6 = goods_6;</span><br><span class="line">                                        next_state = S6_0; </span><br><span class="line">                                    <span class="keyword">end</span></span><br><span class="line">                            <span class="keyword">end</span></span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">begin</span></span><br><span class="line">                                count = count;</span><br><span class="line">                                goods_6 = goods_6;</span><br><span class="line">                                time_begin = <span class="number">1'b0</span>;</span><br><span class="line">                                next_state = IDLE;</span><br><span class="line">                            <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        S6_1:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                count = count;</span><br><span class="line">                goods_6 = goods_6 - <span class="number">7'd1</span>;</span><br><span class="line">                goods_6 = goods_6;</span><br><span class="line">                next_state = IDLE;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        S9_0:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (reconfirm == <span class="number">1'b1</span>)   <span class="comment">// 是否重新选择</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        time_begin = <span class="number">0</span>;</span><br><span class="line">                        goods_9 = goods_9;</span><br><span class="line">                        count = <span class="number">5'd0</span>;</span><br><span class="line">                        next_state = IDLE;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        <span class="keyword">if</span> (time_out == <span class="number">1'b0</span>)</span><br><span class="line">                            <span class="keyword">begin</span></span><br><span class="line">                                <span class="keyword">if</span> (count &gt;= <span class="number">5'd9</span>)</span><br><span class="line">                                    <span class="keyword">begin</span></span><br><span class="line">                                        time_begin = <span class="number">1'b0</span>;</span><br><span class="line">                                        count = count;</span><br><span class="line">                                        goods_9 = goods_9 - <span class="number">7'd1</span>;</span><br><span class="line">                                        next_state = S9_1;</span><br><span class="line">                                    <span class="keyword">end</span></span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    <span class="keyword">begin</span></span><br><span class="line">                                        count = count + din;</span><br><span class="line">                                        time_begin = time_begin;</span><br><span class="line">                                        goods_6 = goods_6;</span><br><span class="line">                                        next_state = S9_0; </span><br><span class="line">                                    <span class="keyword">end</span></span><br><span class="line">                            <span class="keyword">end</span></span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">begin</span></span><br><span class="line">                                count = count;</span><br><span class="line">                                goods_9 = goods_9;</span><br><span class="line">                                time_begin = <span class="number">1'b0</span>;</span><br><span class="line">                                next_state = IDLE;</span><br><span class="line">                            <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        S9_1:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                count = count;</span><br><span class="line">                goods_9 = goods_9 - <span class="number">7'd1</span>;</span><br><span class="line">                goods_9 = goods_9;</span><br><span class="line">                next_state = IDLE;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">default</span>: ;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            dout &lt;= <span class="number">1'b0</span>;</span><br><span class="line">            change &lt;= <span class="number">5'd0</span>;</span><br><span class="line">            empty_6 &lt;= <span class="number">1'b0</span>;</span><br><span class="line">            empty_9 &lt;= <span class="number">1'b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span>(curr_state == S6_0 &amp;&amp; time_out == <span class="number">1'b1</span> &amp;&amp; curr_state == S9_0)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    change &lt;= count;</span><br><span class="line">                    dout &lt;= <span class="number">1'b0</span>;</span><br><span class="line">                    empty_6 &lt;= <span class="number">1'b0</span>;</span><br><span class="line">                    empty_9 &lt;= <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(curr_state == S6_1)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    change &lt;= count - <span class="number">5'd6</span>;</span><br><span class="line">                    dout &lt;= <span class="number">1'b1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(goods_6 &lt;= <span class="number">7'd0</span>)</span><br><span class="line">                        empty_6 &lt;= <span class="number">1'b1</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        empty_6 &lt;= <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(curr_state == S9_1)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    change &lt;= count - <span class="number">5'd9</span>;</span><br><span class="line">                    dout &lt;= <span class="number">1'b1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(goods_9 &lt;= <span class="number">7'd0</span>)</span><br><span class="line">                        empty_9 &lt;= <span class="number">1'b1</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        empty_9 &lt;= <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    change &lt;= <span class="number">5'd0</span>;</span><br><span class="line">                    dout &lt;= <span class="number">1'b0</span>;</span><br><span class="line">                    empty_6 &lt;= <span class="number">1'b0</span>;</span><br><span class="line">                    empty_9 &lt;= <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>testbench文件：</p>
<figure class="highlight verilog"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//~ `New testbench </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">choose 的时序还没有调整</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span>  1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> tb_shopping_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shopping_1 Parameters</span></span><br><span class="line"><span class="keyword">parameter</span> PERIOD = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">parameter</span> INIT  = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">parameter</span> IDLE  = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">parameter</span> S6_0  = <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">parameter</span> S6_1  = <span class="number">2</span> ;</span><br><span class="line"><span class="keyword">parameter</span> S9_0  = <span class="number">3</span> ;</span><br><span class="line"><span class="keyword">parameter</span> S9_1  = <span class="number">4</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shopping_1 Inputs</span></span><br><span class="line"><span class="keyword">reg</span>   clk                                  = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">reg</span>   rst_n                                = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">reg</span>   [<span class="number">2</span>:<span class="number">0</span>]  din                           = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">reg</span>   [<span class="number">2</span>:<span class="number">0</span>]  choose                        = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">reg</span>   confirm                              = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">reg</span>   reconfirm                            = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shopping_1 Outputs</span></span><br><span class="line"><span class="keyword">wire</span>  dout                                 ;</span><br><span class="line"><span class="keyword">wire</span>  [<span class="number">4</span>:<span class="number">0</span>]  change                        ;</span><br><span class="line"><span class="keyword">wire</span>  empty_6                              ;</span><br><span class="line"><span class="keyword">wire</span>  empty_9                              ;</span><br><span class="line"><span class="keyword">wire</span>  [<span class="number">4</span>:<span class="number">0</span>]  count                         ;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">integer</span> file_wr, fp, fp1, data_choose, data, i, j, data_out;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">10</span>:<span class="number">0</span>] count1;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>] money;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">forever</span> <span class="variable">#(PERIOD/2)</span>  clk=~clk;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">    <span class="variable">#(PERIOD*2)</span> rst_n  =  <span class="number">1</span>;</span><br><span class="line">    file_wr = <span class="built_in">$fopen</span>(<span class="string">"C:/Users/57194/Desktop/1/shopping_1/change.txt"</span>,<span class="string">"w"</span>);</span><br><span class="line">    fp = <span class="built_in">$fopen</span>(<span class="string">"C:/Users/57194/Desktop/1/shopping_1/money.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    fp1 = <span class="built_in">$fopen</span>(<span class="string">"C:/Users/57194/Desktop/1/shopping_1/choose.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="variable">#(PERIOD*10000)</span>;</span><br><span class="line">    <span class="built_in">$fclose</span>(fp);</span><br><span class="line">    <span class="built_in">$fclose</span>(fp1);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!rst_n)<span class="keyword">begin</span></span><br><span class="line">        choose &lt;= <span class="number">0</span>;</span><br><span class="line">        data_choose &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; fp!=<span class="string">"\0"</span>;i=i+<span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="variable">#(PERIOD)</span>;</span><br><span class="line">            <span class="built_in">$fscanf</span>(fp, <span class="string">"%d"</span>, data);</span><br><span class="line">            din &lt;= data;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!rst_n)<span class="keyword">begin</span></span><br><span class="line">        choose &lt;= <span class="number">0</span>;</span><br><span class="line">        data_choose &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; fp1!=<span class="string">"\0"</span>;j=j+<span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="variable">#(PERIOD)</span>;</span><br><span class="line">            <span class="built_in">$fscanf</span>(fp1, <span class="string">"%d"</span>, data_choose);</span><br><span class="line">            choose &lt;= data_choose;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)<span class="keyword">begin</span></span><br><span class="line">        data_out&lt;=<span class="number">8'b0</span>;</span><br><span class="line">        count1&lt;=<span class="number">11'b0</span>;</span><br><span class="line">        choose &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(count1&lt;<span class="number">11'd1000</span>) <span class="keyword">begin</span></span><br><span class="line">        data_out&lt;=change;</span><br><span class="line">        count1&lt;=count1+<span class="number">1'b1</span>;</span><br><span class="line">        <span class="built_in">$fdisplay</span>(file_wr,<span class="string">"选择 %d 号商品   投入金额：%d    累计支付：%d    找零：%d   是否出货 %d"</span> , choose, din, count, change, dout);    </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">$fclose</span>(file_wr);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// initial</span></span><br><span class="line"><span class="comment">// begin</span></span><br><span class="line"><span class="comment">//     #(PERIOD*2) rst_n  =  1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     #(PERIOD*3) choose = 2;</span></span><br><span class="line"><span class="comment">//     #(PERIOD) choose = 0;</span></span><br><span class="line"><span class="comment">//     #(PERIOD) reconfirm = 1;</span></span><br><span class="line"><span class="comment">//     #(PERIOD) reconfirm = 0;</span></span><br><span class="line"><span class="comment">//     #(PERIOD*2) choose = 2;</span></span><br><span class="line"><span class="comment">//     #(PERIOD) choose = 0;</span></span><br><span class="line"><span class="comment">//     #(PERIOD) din = 1;</span></span><br><span class="line"><span class="comment">//     #(PERIOD*4) din = 0;</span></span><br><span class="line"><span class="comment">//     #(PERIOD) din = 1;</span></span><br><span class="line"><span class="comment">//     #(PERIOD) din = 0;</span></span><br><span class="line"><span class="comment">//     #(PERIOD*4) din = 5;</span></span><br><span class="line"><span class="comment">//     #(PERIOD) din = 0;</span></span><br><span class="line"><span class="comment">//     #(PERIOD*4) din = 5;</span></span><br><span class="line"><span class="comment">//     #(PERIOD) din = 0;</span></span><br><span class="line"><span class="comment">// end</span></span><br><span class="line"></span><br><span class="line">shopping_1 #(</span><br><span class="line">    <span class="variable">.INIT</span> ( INIT ),</span><br><span class="line">    <span class="variable">.IDLE</span> ( IDLE ),</span><br><span class="line">    <span class="variable">.S6_0</span> ( S6_0 ),</span><br><span class="line">    <span class="variable">.S6_1</span> ( S6_1 ),</span><br><span class="line">    <span class="variable">.S9_0</span> ( S9_0 ),</span><br><span class="line">    <span class="variable">.S9_1</span> ( S9_1 ))</span><br><span class="line"> u_shopping_1 (</span><br><span class="line">    <span class="variable">.clk</span>                     ( clk              ),</span><br><span class="line">    <span class="variable">.rst_n</span>                   ( rst_n            ),</span><br><span class="line">    <span class="variable">.din</span>                     ( din        [<span class="number">2</span>:<span class="number">0</span>] ),</span><br><span class="line">    <span class="variable">.choose</span>                  ( choose     [<span class="number">2</span>:<span class="number">0</span>] ),</span><br><span class="line">    <span class="variable">.confirm</span>                 ( confirm          ),</span><br><span class="line">    <span class="variable">.reconfirm</span>               ( reconfirm        ),</span><br><span class="line"></span><br><span class="line">    <span class="variable">.dout</span>                    ( dout             ),</span><br><span class="line">    <span class="variable">.change</span>                  ( change     [<span class="number">4</span>:<span class="number">0</span>] ),</span><br><span class="line">    <span class="variable">.empty_6</span>                 ( empty_6          ),</span><br><span class="line">    <span class="variable">.empty_9</span>                 ( empty_9          ),</span><br><span class="line">    <span class="variable">.count</span>                   ( count      [<span class="number">4</span>:<span class="number">0</span>] )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="/2021/10/19/%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/%E4%BB%BF%E7%9C%9F.png" alt="仿真结果"></p>
<p><a href="data.zip">点击下载仿真数据</a></p>
<p>仿真中choose信号的到来还未调整，但是功能是正常的。</p>
<h1 id="modelsim-仿真"><a class="header-anchor" href="#Modelsim 仿真">¶</a> Modelsim 仿真</h1>
<h2 id="导入文件仿真"><a class="header-anchor" href="#导入文件，仿真">¶</a> 导入文件，仿真</h2>
<p>  将文件导入后，全部编译，全部通过后，在开启仿真时选择不启用优化器（<font color="red"> 遇到的问题：仿真时自动启用优化器会报错导致不能进行仿真，晚上查找解决方法后将其关闭</font>）。</p>
<p><img src="/2021/10/19/%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/%E4%BB%BF%E7%9C%9F%E8%AE%BE%E7%BD%AE.png" alt="仿真设置"></p>
<h2 id="查看波形"><a class="header-anchor" href="#查看波形">¶</a> 查看波形</h2>
<p><img src="/2021/10/19/%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/%E6%B3%A2%E5%BD%A2.png" alt="波形"></p>
<p>  目前还未对choose信号和din信号先后的到来进行完美的调整，所以会出现choose信号没到来时，din信号先出现。但是这种情况就相当于没选择货物时先投币，这时count计数器并没有触发，相当于并没有对所投的钱进行处理，当choose到来时才会对后续的din进行处理。</p>
<p>  经过之前的手动输入数据，状态机的计时功能，货币累加，出货等状态都可以没有错误的实现，部分测试数据通过matlab随机组合产生，在经过Excel裁剪。matlab代码如下:</p>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">clear; clc;</span><br><span class="line"><span class="comment">% money_2 = [1, 2, 5, 1, 2, 5];</span></span><br><span class="line"><span class="comment">% money_3 = [1, 2, 5, 1, 2, 5, 1, 2, 5];</span></span><br><span class="line"><span class="comment">% money_4 = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5];</span></span><br><span class="line"><span class="comment">% money_5 = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5];</span></span><br><span class="line"><span class="comment">% money_6 = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5];</span></span><br><span class="line"><span class="comment">% money_7 = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5];</span></span><br><span class="line">paper_money_6 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">% random_num = money(randi(numel(money),1,2))</span></span><br><span class="line">random_num = <span class="built_in">nchoosek</span>(paper_money_6,<span class="number">6</span>);</span><br><span class="line">sum = sum(random_num');</span><br><span class="line">sum = sum';</span><br><span class="line">arry = [random_num, sum];</span><br><span class="line">temp = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">[r, c] = <span class="built_in">size</span>(arry);<span class="comment">%r行c列</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : r</span><br><span class="line">    <span class="keyword">if</span>(arry(<span class="built_in">i</span>,<span class="number">7</span>)&lt;=<span class="number">10</span>)</span><br><span class="line">        temp = [temp;arry(<span class="built_in">i</span>,:)]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<p>  最后将测试结果输出到txt文件,部分截图如下图所示：</p>
<p><img src="/2021/10/19/%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9Ctxt.png" alt="输出结果txt"></p>
<h1 id="总结"><a class="header-anchor" href="#总结">¶</a> 总结</h1>
<p>  最开始第一次写的状态机是两段式的，中间的变量赋值和状态跳变比较混乱，思路并不是十分清晰。这次将改进为3段式状态机，首先第一个always块用<strong>同步时序</strong>逻辑去描述每次时钟到来时状态的变化；第二个always用<strong>组合逻辑</strong>来进行状态变化的条件判断；第三个always通过<strong>同步时序</strong>逻辑用来描述每种状态的输出。总之最好<strong>状态转移部分是同步时序电路</strong>，而状态的<strong>转移条件的判断是组合逻辑</strong>。</p>
<p>  网上参考了一篇文档(EECS150: Finite State Machines in Verilog ) ，文中主要讲述了设计状态机时应重点注意的事项。文档如下：</p><div class="pdfobject-container" data-target="FSM.pdf" data-height="500px"></div><p></p>
<p>  从文中总结了一些感觉比较重要的注意要点:</p>
<h2 id="wire和reg"><a class="header-anchor" href="#wire和reg">¶</a> wire和reg</h2>
<p><img src="/2021/10/19/%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/wire_reg.png" alt="wire_reg"></p>
<p>  两者都可以作为assign的右侧进行赋值，都可以用=和&lt;=。</p>
<h2 id="always中赋值方式"><a class="header-anchor" href="#always@(*)中赋值方式">¶</a> always@(*)中赋值方式</h2>
<p><img src="/2021/10/19/%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/always1.png" alt="always1.png"></p>
<figure class="highlight verilog"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">always</span> @(A <span class="keyword">or</span> B)<span class="keyword">begin</span></span><br><span class="line">    C = A &amp; B;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误写法，敏感列表不完全</span></span><br><span class="line"><span class="keyword">always</span>@ ( A )<span class="keyword">begin</span></span><br><span class="line">    C = A &amp; B ;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">always</span>@ ( B )<span class="keyword">begin</span></span><br><span class="line">    C = A &amp; B ;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<p>  上图中说明always@()中应用“<font color="red"> =</font>”，文中提到一点，就是敏感列表必须全部包含，所以推荐使用<font color="red">always@(*)</font>。示例代码综合出来的模型为下图。</p>
<p><img src="/2021/10/19/%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/always1-1.png" alt="always1-1.png"></p>
<h2 id="防止锁存器的产生"><a class="header-anchor" href="#防止锁存器的产生">¶</a> 防止锁存器的产生</h2>
<figure class="highlight verilog"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">wire</span> Trigger , Pass ;</span><br><span class="line"><span class="keyword">reg</span> A, C ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C会产生锁存器</span></span><br><span class="line"><span class="keyword">always</span>@ ( * )<span class="keyword">begin</span></span><br><span class="line">    A = <span class="number">1</span>’b0 ;</span><br><span class="line">    <span class="keyword">if</span>( Trigger )</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            A = Pass ;</span><br><span class="line">            C = Pass ;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会产生锁存器</span></span><br><span class="line"><span class="keyword">always</span>@ ( * )<span class="keyword">begin</span></span><br><span class="line">    A = <span class="number">1</span>’b0 ;</span><br><span class="line">    C = <span class="number">1</span>’b1 ;</span><br><span class="line">    <span class="keyword">if</span>( Trigger )</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            A = Pass ;</span><br><span class="line">            C = Pass ;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<p>两种情况的电路如图：</p>
<p><img src="/2021/10/19/%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/%E4%BA%A7%E7%94%9F%E9%94%81%E5%AD%98%E5%99%A8.png" alt="产生锁存器"></p>
<p><img src="/2021/10/19/%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/%E4%B8%8D%E4%BA%A7%E7%94%9F%E9%94%81%E5%AD%98%E5%99%A8.png" alt="不产生锁存器"></p>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css">]]></content>
      <categories>
        <category>FPGA</category>
        <category>Verilog</category>
      </categories>
      <tags>
        <tag>状态机</tag>
      </tags>
  </entry>
</search>
